{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","cardArray","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","username","App","onSearchChange","event","target","value","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oOAceA,EAZF,SAACC,GACb,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,mBACrB,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCMCC,EAXE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GACnC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAE/E,OACC,6BACKG,ICCQK,EARG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKf,UAAU,OACd,2BAAOA,UAAU,mCAAmCgB,KAAK,SAASC,YAAY,gBAAiBC,SAAUH,MCK7FI,EARA,SAACpB,GACf,OACC,yBAAKqB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpExB,EAAMyB,WCmBKC,E,kDArBd,WAAY1B,GAAO,IAAD,8BACjB,cAAMA,IACD2B,MAAQ,CACZC,UAAU,GAHM,E,8DAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACN,yDAEAG,KAAK/B,MAAMyB,a,GAhBMQ,IAAMC,WCFpB1B,EAAS,CACpB,CACEJ,GAAI,EACJC,KAAM,gBACN8B,SAAU,OACV7B,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACN8B,SAAU,YACV7B,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACN8B,SAAU,WACV7B,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACN8B,SAAU,WACV7B,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACN8B,SAAU,SACV7B,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,gBACN8B,SAAU,mBACV7B,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACN8B,SAAU,eACV7B,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,mBACN8B,SAAU,gBACV7B,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACN8B,SAAU,WACV7B,MAAO,qBAET,CACEF,GAAI,GACJC,KAAM,mBACN8B,SAAU,iBACV7B,MAAO,2BCdI8B,G,wDAnCb,aAAe,IAAD,8BACZ,gBAOFC,eAAiB,SAACC,GAChB,EAAKN,SAAS,CAAEjB,YAAauB,EAAMC,OAAOC,SAP1C,EAAKb,MAAQ,CACXnB,OAAQA,EACRO,YAAa,IAJH,E,qDAYJ,IAAD,OACD0B,EAAiBV,KAAKJ,MAAMnB,OAAOkC,QAAO,SAAAC,GAC9C,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAS,EAAKlB,MAAMZ,YAAY6B,kBAGlE,OAAgC,IAA7Bb,KAAKJ,MAAMnB,OAAOsC,OACZ,wBAAI7C,UAAU,MAAd,WAGL,yBAAKA,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWe,aAAce,KAAKM,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU7B,OAASiC,W,GA3BfR,IAAMC,Y,MCGJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACN,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,a","file":"static/js/main.19f73440.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\treturn(\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' >\n\t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?size=200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{props.name}</h2>\n\t\t\t\t<p>{props.email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\tconst cardArray = robots.map((user, i) => {\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>;\n\t})\n\treturn(\n\t\t<div>\n\t    \t{cardArray}\n    \t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n\treturn(\n\t\t<div className='pa2' >\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots'  onChange={searchChange} />\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn(\n\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px' }} >\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundry extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender(){\n\t\tif(this.state.hasError) {\n\t\t\treturn <h1> Oops! That is not good! </h1>;\n\t\t} else {\n\t\t\treturn this.props.children;\n\t\t}\n\t}\n}\n\n\nexport default ErrorBoundry;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis S',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runol V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina Buque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport {robots} from './robots';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: robots,\n      searchField: ''\n    }   \n  }\n  \n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value})\n  }\n\n  render() {\n    const filteredRobots = this.state.robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    });\n\n    if(this.state.robots.length === 0) {\n      return <h1 className='tc'>Loading</h1>\n    }else {\n      return(\n        <div className='tc' >\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={ filteredRobots } />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \t<React.StrictMode>\n  \t\t<App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}